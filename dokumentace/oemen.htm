<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en"><head>


<!-- generated by hwl -->

<title>Odd-even mergesort</title>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<meta name="keywords" content="Odd-even mergesort, sorting network">
<meta name="description" content="Description of algorithm odd-even mergesort (course material)">
<meta name="author" content="Hans Werner Lang; Flensburg University of Applied Sciences, Germany">
<meta name="date" content="2010-05-18">
<meta http-equiv="content-language" content="en">
<meta name="geo.region" content="DE-SH">
<meta name="geo.placename" content="Flensburg">
<meta name="geo.position" content="54.774455;9.448972">
<link rel="stylesheet" type="text/css" href="oemen_files/arial.css">
<link rel="stylesheet" type="text/css" href="oemen_files/sort.css">
<link rel="shortcut icon" href="http://www.iti.fh-flensburg.de/lang/favicon.ico">
<link rel="up" title="up" href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/networks/indexen.htm">
<link rel="start" title="home page" href="http://www.iti.fh-flensburg.de/lang/indexen.htm">
<link rel="next" title="next page" href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/bitonic/bitonicen.htm">
<link rel="author" title="author" href="http://www.iti.fh-flensburg.de/lang/indexen.htm">
</head><body><a name="section0" href="#section0" accesskey="1"></a>
<div class="body">
<table border="0" width="100%"><tbody><tr><td><h1>Sorting networks</h1>
<h2>Odd-even mergesort</h2>
</td><td align="right" valign="top">&nbsp;<a href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/networks/oem.htm" target="_top"><img class="screen" src="oemen_files/de.gif" alt="German version" title="German version" border="0" height="19" width="19"></a>
&nbsp;<a href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/networks/indexen.htm" target="_top" accesskey="6"><img class="screen" src="oemen_files/up.gif" alt="up" title="up" border="0" height="19" width="19"></a>
</td></tr>
</tbody></table>

<p>The odd-even mergesort algorithm was developed by <span class="person">K.E. Batcher</span> <a title="K.E. Batcher: Sorting Networks and their Applications. Proc. AFIPS Spring Joint Comput. Conf., Vol. 32, 307-314 (1968)">[Bat&nbsp;68]</a>. It is based on a merge algorithm that merges two sorted halves of a sequence to a completely sorted sequence. </p>

<p>In contrast to <a href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/merge/mergen.htm" target="_top">mergesort</a>,
 this algorithm is not data-dependent, i.e. the same comparisons are 
performed regardless of the actual data. Therefore, odd-even mergesort 
can be implemented as a <a href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/networks/sortieren.htm" target="_top" title="see definition" style="text-decoration: none;">sorting network</a>. </p>

<p class="abst">&nbsp;</p>

<h3 class="header"><a name="section1">Merge algorithm</a></h3>

<p>The following algorithm merges a sequence whose two halves are sorted to a sorted sequence. </p>

<p></p>


<p class="abst">&nbsp;</p>
<table border="0" cellpadding="5" cellspacing="0" width="100%">
<tbody><tr><td width="100"></td><td></td></tr>
<tr><td colspan="2"><b>Algorithm <i>odd-even merge</i>(<i>n</i>)</b></td></tr>
<tr><td valign="top"><b>Input:</b></td><td>sequence <var>a</var><sub>0</sub>,&nbsp;...,&nbsp;<var>a</var><sub><var>n</var>-1</sub> of length <var>n</var>&gt;1 whose two halves <var>a</var><sub>0</sub>,&nbsp;...,&nbsp;<var>a</var><sub><var>n</var>/2-1</sub> and <var>a</var><sub><var>n</var>/2</sub>,&nbsp;...,&nbsp;<var>a</var><sub><var>n</var>-1</sub> are sorted (<var>n</var> a power of 2) </td></tr>
<tr><td valign="top"><b>Output:</b></td><td>the sorted sequence </td></tr>
<tr><td valign="top"><b>Method:</b></td><td style="padding-left: 0px; padding-top: 0px;">
<ol class="non" style="list-style-type: none;"><li>
if <var>n</var>&gt;2 then 

<ol style="list-style-type: decimal;"><li>
 apply <i>odd-even merge</i>(<var>n</var>/2) recursively to the even subsequence <var>a</var><sub>0</sub>, <var>a</var><sub>2</sub>,&nbsp;...,&nbsp;<var>a</var><sub><var>n</var>-2</sub> and to the odd subsequence <var>a</var><sub>1</sub>, <var>a</var><sub>3</sub>, ,&nbsp;...,&nbsp;<var>a</var><sub><var>n</var>-1</sub>; 
</li><li>
compare [<var>a</var><sub><var>i</var></sub> : <var>a</var><sub><var>i</var>+1</sub>] for all <var>i</var>&nbsp;<img src="oemen_files/elem.gif" alt="element">&nbsp;{1, 3, 5, 7,&nbsp;...,&nbsp;<var>n</var>-3} 
</li></ol>
<p>
else 
</p>

<ol style="list-style-type: none;"><li>
compare [<var>a</var><sub>0</sub> : <var>a</var><sub>1</sub>]; 
</li></ol>
</li></ol>
</td></tr>
</tbody></table>
<p class="abst">&nbsp;</p>
<p class="abst">&nbsp;</p>

<h3 class="header"><a name="section2">Correctness</a></h3>

<p>The correctness of the merge algorithm is proved using induction and the <a href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/networks/nulleinsen.htm" target="_top">0-1-principle</a>. </p>

<p>If <var>n</var>&nbsp;=&nbsp;2<sup>1</sup> the sequence is sorted by the comparison [<var>a</var><sub>0</sub> : <var>a</var><sub>1</sub>]. So let <var>n</var>&nbsp;=&nbsp;2<sup><var>k</var></sup>, <var>k</var>&nbsp;&gt;&nbsp;1 and assume the algorithm is correct for all smaller <var>k</var> (induction hypothesis). </p>

<p>Consider the 0-1-sequence <var>a</var>&nbsp;=&nbsp;<var>a</var><sub>0</sub>,&nbsp;...,&nbsp;<var>a</var><sub><var>n</var>-1</sub>
 to be arranged in rows of an array with two columns. The corresponding 
mapping of the index positions is shown in Figure 1a, here for <var>n</var>&nbsp;=&nbsp;16.
 Then Figure 1b shows a possible situation with a 0-1-sequence. Each of 
its two sorted halves starts with some 0's (white) and ends with some 
1's (gray). </p>

<div class="ind">
   <table border="0">
   <tbody><tr><td height="10"></td></tr>
   <tr><td align="center">
      <table border="0"><tbody><tr>
      <td align="center" valign="bottom"><img src="oemen_files/oem.gif" alt="Situations during execution of odd-even merge"></td>
      </tr></tbody></table>
   </td></tr>
   <tr><td align="center">
   </td></tr>

   <tr><td height="10"></td></tr>

   <tr><td class="bez">Figure 1:&nbsp; Situations during execution of odd-even merge</td></tr>
<tr><td height="10"></td></tr>
   </tbody></table>
</div>

<p>In the left column the even subsequence is found, i.e. all <var>a</var><sub><var>i</var></sub> with <var>i</var> even, namely <var>a</var><sub>0</sub>, <var>a</var><sub>2</sub>, <var>a</var><sub>4</sub> etc.; in the right column the odd subsequence is found, i.e. all <var>a</var><sub><var>i</var></sub> with <var>i</var> odd, namely <var>a</var><sub>1</sub>, <var>a</var><sub>3</sub>, <var>a</var><sub>5</sub> etc. Just like the original sequence the even as well as the odd subsequence consists of two sorted halves. </p>

<p>By induction hypothesis, the left and the right column are sorted by recursive application of <i>odd-even merge</i>(<var>n</var>/2) in step 1 of the algorithm. The right column can have at most two more 1's than the left column (Figure 1c). </p>

<p>After performing the comparisons of step 2 of the algorithm (Figure 1d), in each case the array is sorted (Figure 1e). </p>

<p class="abst">&nbsp;</p>

<h3 class="header"><a name="section3">Analysis</a></h3>

<p>Let <var>T</var>(<var>n</var>) be the number of comparisons performed by <i>odd-even merge</i>(<var>n</var>). Then we have for <var>n</var>&gt;2 </p>

<p class="ind"><var>T</var>(<var>n</var>)&nbsp;&nbsp;=&nbsp;&nbsp;2·<var>T</var>(<var>n</var>/2)&nbsp;+&nbsp;<var>n</var>/2-1. </p>

<p>With <var>T</var>(2)&nbsp;=&nbsp;1 we have </p>

<p class="ind"><var>T</var>(<var>n</var>)&nbsp;&nbsp;=&nbsp;&nbsp;<var>n</var>/2 · (log(<var>n</var>)-1)&nbsp;+&nbsp;1&nbsp;&nbsp;<img src="oemen_files/elem.gif" alt="element">&nbsp;&nbsp;<var>O</var>(<var>n</var>·log(<var>n</var>)). </p>

<p class="abst">&nbsp;</p>

<h3 class="header"><a name="section4">Sorting algorithm</a></h3>

<p>By recursive application of the merge algorithm the sorting algorithm odd-even mergesort is formed. </p>

<p></p>


<p class="abst">&nbsp;</p>
<table border="0" cellpadding="5" cellspacing="0" width="100%">
<tbody><tr><td width="100"></td><td></td></tr>
<tr><td colspan="2"><b>Algorithm <i>odd-even mergesort</i>(<i>n</i>)</b></td></tr>
<tr><td valign="top"><b>Input:</b></td><td>sequence <var>a</var><sub>0</sub>,&nbsp;...,&nbsp;<var>a</var><sub><var>n</var>-1</sub> (<var>n</var> a power of 2) </td></tr>
<tr><td valign="top"><b>Output:</b></td><td>the sorted sequence </td></tr>
<tr><td valign="top"><b>Method:</b></td><td style="padding-left: 0px; padding-top: 0px;">
<ol class="non" style="list-style-type: none;"><li>
if <var>n</var>&gt;1 then 

<ol style="list-style-type: decimal;"><li>
apply <i>odd-even mergesort</i>(<var>n</var>/2) recursively to the two halves <var>a</var><sub>0</sub>,&nbsp;...,&nbsp;<var>a</var><sub><var>n</var>/2-1</sub> and <var>a</var><sub><var>n</var>/2</sub>,&nbsp;...,&nbsp;<var>a</var><sub><var>n</var>-1</sub> of the sequence; 
</li><li>
<i>odd-even merge</i>(<var>n</var>); 
</li></ol>
</li></ol>
</td></tr>
</tbody></table>
<p class="abst">&nbsp;</p>
<p>Figure 2 shows the odd-even mergesort network for <var>n</var>&nbsp;=&nbsp;8. </p>


   <table border="0">
   <tbody><tr><td height="10"></td></tr>
   <tr><td align="center">
      <table border="0"><tbody><tr>
      <td align="center" valign="bottom"><img src="oemen_files/oemnet.gif" alt="Odd-even mergesort for n&nbsp;=&nbsp;8"></td>
      </tr></tbody></table>
   </td></tr>
   <tr><td align="center">
   </td></tr>

   <tr><td height="10"></td></tr>

   <tr><td class="bez">Figure 2:&nbsp; Odd-even mergesort for <var>n</var>&nbsp;=&nbsp;8</td></tr>
<tr><td height="10"></td></tr>
   </tbody></table>
<p>The number of comparators of odd-even mergesort is in <var>O</var>(<var>n</var> log(<var>n</var>)<sup>2</sup>). </p>

<p class="abst">&nbsp;</p>

<h3 class="header"><a name="section5">Program</a></h3>

<p>An implementation of odd-even mergesort in Java is given in the following. The algorithm is encapsulated in a class <i>OddEvenMergeSorter</i>. Its method <i>sort</i> passes the array to be sorted to array <i>a</i> and calls function <i>oddEvenMergeSort</i>. </p>

<p>Function <i>oddEvenMergeSort</i> recursively sorts the two halves of the array. Then it merges the two halves with <i>oddEvenMerge</i>. </p>

<p>Function <i>oddEvenMerge</i> picks every 2<var>r</var>-th element starting from position <i>lo</i> and <i>lo</i>+<i>r</i>, respectively, thus forming the even and the odd subsequence. According to the recursion depth <var>r</var> is 1, 2, 4, 8, .... </p>

<p>With the statements </p>

<table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code">
<pre class="java">Sorter s=<span class="codekeyword">new</span> OddEvenMergeSorter();
s.sort(b);
</pre></td></tr></tbody></table> 
<p>an object of type <i>OddEvenMergeSorter</i> is created and its method <i>sort</i> is called in order to sort array <i>b</i>. The length <var>n</var> of the array must be a power of 2. </p>

<p class="abst">&nbsp;</p>
<table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code">
<pre class="java"><span class="codekeyword">public</span> <span class="codekeyword">class</span> OddEvenMergeSorter <span class="codekeyword">implements</span> Sorter
{
    <span class="codekeyword">private</span> <span class="codekeyword">int</span>[] a;

    <span class="codekeyword">public</span> <span class="codekeyword">void</span> sort(<span class="codekeyword">int</span>[] a)
    {
        <span class="codekeyword">this</span>.a=a;
        oddEvenMergeSort(0, a.length);
    }

    <span class="codecomment">/** sorts a piece of length n of the array
     *  starting at position lo
     */</span>
    <span class="codekeyword">private</span> <span class="codekeyword">void</span> oddEvenMergeSort(<span class="codekeyword">int</span> lo, <span class="codekeyword">int</span> n)
    {
        <span class="codekeyword">if</span> (n&gt;1)
        {
            <span class="codekeyword">int</span> m=n/2;
            oddEvenMergeSort(lo, m);
            oddEvenMergeSort(lo+m, m);
            oddEvenMerge(lo, n, 1);
        }
    }

    <span class="codecomment">/** lo is the starting position and
     *  n is the length of the piece to be merged,
     *  r is the distance of the elements to be compared
     */</span>
    <span class="codekeyword">private</span> <span class="codekeyword">void</span> oddEvenMerge(<span class="codekeyword">int</span> lo, <span class="codekeyword">int</span> n, <span class="codekeyword">int</span> r)
    {
        <span class="codekeyword">int</span> m=r*2;
        <span class="codekeyword">if</span> (m&lt;n)
        {
            oddEvenMerge(lo, n, m);      <span class="codecomment">// even subsequence</span>
            oddEvenMerge(lo+r, n, m);    <span class="codecomment">// odd subsequence</span>
            <span class="codekeyword">for</span> (<span class="codekeyword">int</span> i=lo+r; i+r&lt;lo+n; i+=m)
                compare(i, i+r);
        }
        <span class="codekeyword">else</span>
            compare(lo, lo+r);
    }

    <span class="codekeyword">private</span> <span class="codekeyword">void</span> compare(<span class="codekeyword">int</span> i, <span class="codekeyword">int</span> j)
    {
        <span class="codekeyword">if</span> (a[i]&gt;a[j])
            exchange(i, j);
    }

    <span class="codekeyword">private</span> <span class="codekeyword">void</span> exchange(<span class="codekeyword">int</span> i, <span class="codekeyword">int</span> j)
    {
        <span class="codekeyword">int</span> t=a[i];
        a[i]=a[j];
        a[j]=t;
    }

}    <span class="codecomment">// end class OddEvenMergeSorter</span>
</pre></td></tr></tbody></table> 
<p class="abst">&nbsp;</p>

<h3 class="header"><a name="section6">Conclusions</a></h3>

<p>There are other sorting networks that have a complexity of <var>O</var>(<var>n</var> log(<var>n</var>)<sup>2</sup>), too, e.g. <a href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/bitonic/bitonicen.htm" target="_top">bitonic sort</a> and <a href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/shell/shellen.htm" target="_top">shellsort</a>. However, odd-even mergesort requires the fewest comparators of these. The following table shows the number of comparators for <var>n</var>&nbsp;=&nbsp;4, 16, 64, 256 and 1024. </p>


   <table class="border">
   <tbody><tr><th style="vertical-align: bottom; text-align: right;"><var>n</var></th><th style="vertical-align: bottom; text-align: right;">odd-even<br>mergesort</th><th style="vertical-align: bottom; text-align: right;">bitonic sort</th><th style="vertical-align: bottom; text-align: right;">shellsort</th></tr>
   <tr><th style="vertical-align: bottom; text-align: right;">4</th><td style="vertical-align: bottom; text-align: right;">5</td><td style="vertical-align: bottom; text-align: right;">6</td><td style="vertical-align: bottom; text-align: right;">6</td></tr>
   <tr><th style="vertical-align: bottom; text-align: right;">16</th><td style="vertical-align: bottom; text-align: right;">63</td><td style="vertical-align: bottom; text-align: right;">80</td><td style="vertical-align: bottom; text-align: right;">83</td></tr>
   <tr><th style="vertical-align: bottom; text-align: right;">64</th><td style="vertical-align: bottom; text-align: right;">543</td><td style="vertical-align: bottom; text-align: right;">672</td><td style="vertical-align: bottom; text-align: right;">724</td></tr>
   <tr><th style="vertical-align: bottom; text-align: right;">256</th><td style="vertical-align: bottom; text-align: right;">3839</td><td style="vertical-align: bottom; text-align: right;">4608</td><td style="vertical-align: bottom; text-align: right;">5106</td></tr>
   <tr><th style="vertical-align: bottom; text-align: right;">&nbsp;1024</th><td style="vertical-align: bottom; text-align: right;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;24063</td><td style="vertical-align: bottom; text-align: right;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;28160</td><td style="vertical-align: bottom; text-align: right;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;31915</td></tr>
   </tbody></table> 
<div class="box">
<p class="line1"><span class="def">Exercise 1:</span>&nbsp;&nbsp;Give the exact formula for <var>T</var>(<var>n</var>),
 the number of comparators of odd-even mergesort. Check your formula by 
comparing its results with the entries in the table above. 
</p>

</div>

<p class="abst">&nbsp;</p>

<h3 class="header"><a name="section7">References</a></h3>

<table cellpadding="0" cellspacing="0" width="100%">
<tbody><tr><td class="litref"></td><td height="5"></td><td></td></tr>
<tr><td class="litref">[Bat&nbsp;68]</td><td class="lit" colspan="2"><span class="person">K.E. Batcher</span>: Sorting Networks and their Applications. Proc. AFIPS Spring Joint Comput. Conf., Vol. 32, 307-314 (1968)</td></tr>

<tr><td class="litref">[Sed&nbsp;03]</td><td class="lit" colspan="2"><span class="person">R. Sedgewick</span>: Algorithms in Java, Parts 1-4. 3rd edition, Addison-Wesley (2003)</td></tr>

</tbody></table>

<p class="abst">&nbsp;</p>


<p class="abst">&nbsp;</p>
<table class="trailer" width="100%"><tbody><tr><td>Next: &nbsp; <a href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/bitonic/bitonicen.htm" target="_top">[Bitonic sort]</a> &nbsp; or &nbsp; <a href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/networks/indexen.htm" target="_top"><img src="oemen_files/up1.gif" alt="up" title="up" align="bottom" border="0"></a></td><td align="right" width="185">
<a href="http://del.icio.us/post/post?url=http://www.inf.fh-flensburg.de/lang/algorithmen/sortieren/networks/oemen.htm&amp;title=Odd-even%20mergesort" title="del.icio.us">
<img class="screen" src="oemen_files/delicious.png" alt="del.icio.us" border="0"></a> 
<a href="http://digg.com/submit?phase=2&amp;url=http://www.inf.fh-flensburg.de/lang/algorithmen/sortieren/networks/oemen.htm" title="digg.com">
<img class="screen" src="oemen_files/digg.gif" alt="digg.com" border="0"></a> 
<a href="http://www.google.com/bookmarks/mark?u=http://www.inf.fh-flensburg.de/lang/algorithmen/sortieren/networks/oemen.htm&amp;op=add&amp;bkmk=http://www.inf.fh-flensburg.de/lang/algorithmen/sortieren/networks/oemen.htm&amp;title=Odd-even%20mergesort" title="Google">
<img class="screen" src="oemen_files/google.png" alt="Google" border="0"></a> 
<a href="http://ma.gnolia.com/beta/bookmarklet/add?url=http://www.inf.fh-flensburg.de/lang/algorithmen/sortieren/networks/oemen.htm&amp;title=Odd-even%20mergesort" title="Ma.gnolia">
<img class="screen" src="oemen_files/magnolia.png" alt="Ma.gnolia" border="0"></a> 
<a href="http://www.mister-wong.de/index.php?action=addurl&amp;bm_url=http://www.inf.fh-flensburg.de/lang/algorithmen/sortieren/networks/oemen.htm&amp;bm_description=Odd-even%20mergesort" title="Mister Wong">
<img class="screen" src="oemen_files/wong.png" alt="Mister Wong" border="0"></a> 
<a href="http://www.stumbleupon.com/submit?url=http://www.inf.fh-flensburg.de/lang/algorithmen/sortieren/networks/oemen.htm&amp;title=Odd-even%20mergesort" title="StumbleUpon">
<img class="screen" src="oemen_files/su.png" alt="StumbleUpon" border="0"></a> 
<a href="http://myweb.yahoo.com/myresults/bookmarklet?u=http://www.inf.fh-flensburg.de/lang/algorithmen/sortieren/networks/oemen.htm&amp;t=Odd-even%20mergesort" title="YahooMyWeb">
<img class="screen" src="oemen_files/yahoomyweb.gif" alt="YahooMyWeb" border="0"></a> 
<a href="http://linkarena.com/bookmarks/addlink/?url=http://www.inf.fh-flensburg.de/lang/algorithmen/sortieren/networks/oemen.htm&amp;title=Odd-even%20mergesort" title="LinkARENA">
<img class="screen" src="oemen_files/linkarena.gif" alt="LinkARENA" border="0"></a> 
</td></tr></tbody></table>
<p class="abst">&nbsp;</p>

<table cellspacing="0" width="100%"><tbody><tr><td>
<address><a href="http://www.iti.fh-flensburg.de/lang/indexen.htm" target="_top" title="home" accesskey="0"><img class="screen" src="oemen_files/home.gif" alt="home" border="0" height="10" width="25">H.W. Lang</a> &nbsp; <a href="http://www.fh-flensburg.de/" target="_top" title="Fachhochschule Flensburg - University of Applied Sciences">FH Flensburg</a> &nbsp; <a href="mailto:lang@fh-flensburg.de" title="send comments">lang@fh-flensburg.de</a> &nbsp; <a href="http://www.iti.fh-flensburg.de/lang/impressum.htm" target="_top">Impressum</a> &nbsp; © &nbsp; Created: 31.01.1998 &nbsp; Updated: 18.05.2010</address></td>
<td align="right"><a href="http://validator.w3.org/check?uri=referer"><img class="screen" src="oemen_files/validhtml401.gif" alt="Valid HTML 4.01 Transitional" align="bottom" border="0" height="16" width="44"></a></td></tr></tbody></table>
</div>
</body></html>