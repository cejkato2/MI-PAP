<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en"><head>


<!-- generated by hwl -->

<title>Bitonic sort</title>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<meta name="keywords" content="sorting network, 0-1-principle">
<meta name="description" content="Description of the bitonic sorting algorithm (course material)">
<meta name="author" content="Hans Werner Lang; Flensburg University of Applied Sciences, Germany">
<meta name="date" content="2010-05-18">
<meta http-equiv="content-language" content="en">
<meta name="geo.region" content="DE-SH">
<meta name="geo.placename" content="Flensburg">
<meta name="geo.position" content="54.774455;9.448972">
<link rel="stylesheet" type="text/css" href="bitonicen_files/arial.css">
<link rel="stylesheet" type="text/css" href="bitonicen_files/sort.css">
<link rel="shortcut icon" href="http://www.iti.fh-flensburg.de/lang/favicon.ico">
<link rel="up" title="up" href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/networks/indexen.htm">
<link rel="start" title="home page" href="http://www.iti.fh-flensburg.de/lang/indexen.htm">
<link rel="author" title="author" href="http://www.iti.fh-flensburg.de/lang/indexen.htm">
<script language="javascript" type="text/javascript" src="bitonicen_files/help.js"></script>
</head><body><a name="section0" href="#section0" accesskey="1"></a>
<div class="body">
<table border="0" width="100%"><tbody><tr><td><h1>Sorting networks</h1>
<h2>Bitonic sort</h2>
</td><td align="right" valign="top">&nbsp;<a href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/bitonic/bitonicenfra.htm" target="_top"><img class="screen" src="bitonicen_files/co.gif" alt="contents" title="contents" border="0" height="19" width="19"></a>
&nbsp;<a href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/bitonic/bitonic.htm" target="_top"><img class="screen" src="bitonicen_files/de.gif" alt="German version" title="German version" border="0" height="19" width="19"></a>
&nbsp;<a href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/networks/indexen.htm" target="_top" accesskey="6"><img class="screen" src="bitonicen_files/up.gif" alt="up" title="up" border="0" height="19" width="19"></a>
</td></tr>
</tbody></table>

<p>Bitonic sort <a title="K.E. Batcher: Sorting Networks and their Applications. Proc. AFIPS Spring Joint Comput. Conf., Vol. 32, 307-314 (1968)">[Bat&nbsp;68]</a> is one of the fastest sorting networks. A <a href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/networks/sortieren.htm" target="_top">sorting network</a> <a title="D.E. Knuth: The Art of Computer Programming, Vol. 3 - Sorting and Searching. Addison-Wesley (1973)">[Knu&nbsp;73]</a><a title="T.H. Cormen, C.E. Leiserson, R.L. Rivest, C. Stein: Introduction to Algorithms. 2nd edition, The MIT Press (2001)">[CLRS&nbsp;01]</a>
 is a special kind of sorting algorithm, where the sequence of 
comparisons is not data-dependent. This makes sorting networks suitable 
for implementation in hardware or in <a href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/twodim/zweidimen.htm" target="_top">parallel processor arrays</a>. </p>

<p>The sorting network bitonic sort consists of &#920;(<var>n</var>·log(<var>n</var>)<sup>2</sup>) comparators. It has the same <a href="http://www.iti.fh-flensburg.de/lang/algorithmen/asympen.htm" target="_top" title="see definition" style="text-decoration: none;">asymptotic complexity</a> as <a href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/networks/oemen.htm" target="_top">odd-even mergesort</a> and <a href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/shell/shellen.htm#section4" target="_top">shellsort</a>. Although a sorting network with only <var>O</var>(<var>n</var>·log(<var>n</var>)) comparators is known <a title="M. Ajtai, J. Komlos, E. Szemeredi: An O(n log n) Sorting Network. Proceedings of the 25th ACM Symposium on Theory of Computing, 1-9 (1983)">[AKS&nbsp;83]</a>, due to its large constant it is slower than bitonic sort for all practical problem sizes. </p>

<p>In the following, bitonic sort is developed on the basis of the <a href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/networks/nulleinsen.htm" target="_top">0-1-principle</a> <a title="D.E. Knuth: The Art of Computer Programming, Vol. 3 - Sorting and Searching. Addison-Wesley (1973)">[Knu&nbsp;73]</a><a title="T.H. Cormen, C.E. Leiserson, R.L. Rivest, C. Stein: Introduction to Algorithms. 2nd edition, The MIT Press (2001)">[CLRS&nbsp;01]</a>.
 The 0-1-principle states that a comparator network that sorts every 
sequence of 0's and 1's is a sorting network, i.e. it sorts every 
sequence of arbitrary values. </p>

<p class="abst">&nbsp;</p>

<h3 class="header"><a name="section1">Basic concepts</a></h3>

<div class="box">
<p class="line1"><span class="def">Definition:</span>&nbsp;&nbsp;A sequence <var>a</var>&nbsp;=&nbsp;<var>a</var><sub>0</sub>,&nbsp;...,&nbsp;<var>a</var><sub><var>n</var>-1</sub>&nbsp; with&nbsp; <var>a</var><sub><var>i</var></sub>&nbsp;<img src="bitonicen_files/elem.gif" alt="element">&nbsp;{0, 1}, <var>i</var>&nbsp;=&nbsp;0,&nbsp;...,&nbsp;<var>n</var>-1 is called <span class="di">0-1-sequence</span>. 
</p>

<p>A 0-1-sequence is called <span class="di">bitonic</span>,<a href="#footnote" style="text-decoration: none;" title="see footnote" name="rft1"><sup>1</sup>)</a> if it contains at most two changes between 0 and 1, i.e. if there exist subsequence lengths&nbsp; <var>k</var>, <var>m</var>&nbsp;<img src="bitonicen_files/elem.gif" alt="element">&nbsp;{1,&nbsp;...,&nbsp;<var>n</var>} such that </p>

<p class="ind"><var>a</var><sub>0</sub>,&nbsp;...,&nbsp;<var>a</var><sub><var>k</var>-1</sub>&nbsp;=&nbsp;0 , &nbsp; &nbsp; <var>a</var><sub><var>k</var></sub>,&nbsp;...,&nbsp;<var>a</var><sub><var>m</var>-1</sub>&nbsp;=&nbsp;1 , &nbsp; &nbsp; <var>a</var><sub><var>m</var></sub>,&nbsp;...,&nbsp;<var>a</var><sub><var>n</var>-1</sub>&nbsp;=&nbsp;0 &nbsp; or </p>

<p class="ind"><var>a</var><sub>0</sub>,&nbsp;...,&nbsp;<var>a</var><sub><var>k</var>-1</sub>&nbsp;=&nbsp;1 , &nbsp; &nbsp; <var>a</var><sub><var>k</var></sub>,&nbsp;...,&nbsp;<var>a</var><sub><var>m</var>-1</sub>&nbsp;=&nbsp;0 , &nbsp; &nbsp; <var>a</var><sub><var>m</var></sub>,&nbsp;...,&nbsp;<var>a</var><sub><var>n</var>-1</sub>&nbsp;=&nbsp;1 </p>

</div>

<p>In the following figure, different examples of bitonic 0-1-sequences are outlined, where 0's are drawn white and 1's gray. </p>


   <table border="0">
   <tbody><tr><td height="10"></td></tr>
   <tr><td align="center">
      <table border="0"><tbody><tr>
      <td align="center" valign="bottom"><img src="bitonicen_files/bitoseq.gif" alt="Some examples of bitonic 0-1-sequences"></td>
      </tr></tbody></table>
   </td></tr>
   <tr><td align="center">
   </td></tr>

   <tr><td height="10"></td></tr>

   <tr><td class="bez">Figure 1:&nbsp; Some examples of bitonic 0-1-sequences</td></tr>
<tr><td height="10"></td></tr>
   </tbody></table>
<div class="box">
<p class="line1"><span class="def">Definition:</span>&nbsp;&nbsp;Let <var>n</var>&nbsp;<img src="bitonicen_files/elem.gif" alt="element">&nbsp;<img src="bitonicen_files/n.gif" alt="natural numbers">, <var>n</var> even. The comparator network <var>B</var><sub><var>n</var></sub> is defined as follows: 
</p>

<p class="ind"><var>B</var><sub><var>n</var></sub>&nbsp;&nbsp;=&nbsp;&nbsp;[0&nbsp;:&nbsp;<var>n</var>/2]&nbsp;&nbsp;[1&nbsp;:&nbsp;<var>n</var>/2+1]&nbsp; ...&nbsp; [<var>n</var>/2-1&nbsp;:&nbsp;<var>n</var>-1] &nbsp; &nbsp; &nbsp;(see example of Figure 2)</p>

</div>

<div class="box">
<p class="line1"><span class="def">Example:</span>&nbsp;&nbsp;
</p>

<div class="ind">
   <table border="0">
   <tbody><tr><td height="10"></td></tr>
   <tr><td align="center">
      <table border="0"><tbody><tr>
      <td align="center" valign="bottom"><img src="bitonicen_files/bito8.gif" alt="Comparator network B8"></td>
      </tr></tbody></table>
   </td></tr>
   <tr><td align="center">
   </td></tr>

   <tr><td height="10"></td></tr>

   <tr><td class="bez">Figure 2:&nbsp; Comparator network B<sub>8</sub></td></tr>
<tr><td height="10"></td></tr>
   </tbody></table>
</div>

</div>

<div class="box">
<p class="line1"><span class="def">Theorem:</span>&nbsp;&nbsp;Let <var>a</var>&nbsp;=&nbsp;<var>a</var><sub>0</sub>,&nbsp;...,&nbsp;<var>a</var><sub><var>n</var>-1</sub> be a bitonic 0-1-sequence, where <var>n</var>&nbsp;<img src="bitonicen_files/elem.gif" alt="element">&nbsp;<img src="bitonicen_files/n.gif" alt="natural numbers">, <var>n</var> even. Application of comparator network <var>B</var><sub><var>n</var></sub> to <var>a</var> yields 
</p>

<p class="ind"><var>B</var><sub><var>n</var></sub>(<var>a</var>) &nbsp;&nbsp;=&nbsp;&nbsp;<var>b</var><sub>0</sub>,&nbsp;...,&nbsp;<var>b</var><sub><var>n</var>/2-1</sub>&nbsp;&nbsp;<var>c</var><sub>0</sub>,&nbsp;...,&nbsp;<var>c</var><sub><var>n</var>/2-1</sub> </p>

<p>where all <var>b</var><sub><var>i</var></sub> are less than or equal to all <var>c</var><sub><var>j</var></sub> , &nbsp; i.e. </p>

<p class="ind"><var>b</var><sub><var>i</var></sub><img src="bitonicen_files/le.gif" alt="&lt;="><var>c</var><sub><var>j</var></sub> &nbsp; for all&nbsp; <var>i</var>, <var>j</var>&nbsp;<img src="bitonicen_files/elem.gif" alt="element">&nbsp;{0,&nbsp;...,&nbsp;<var>n</var>/2-1} </p>

<p>and furthermore </p>

<p class="ind"><var>b</var><sub>0</sub>,&nbsp;...,&nbsp;<var>b</var><sub><var>n</var>/2-1</sub>&nbsp; is bitonic &nbsp; and <br><var>c</var><sub>0</sub>,&nbsp;...,&nbsp;<var>c</var><sub><var>n</var>/2-1</sub> &nbsp; is bitonic.</p>

</div>

<div class="box">
<p class="line1"><span class="def">Proof:</span>&nbsp;&nbsp;Let <var>a</var>&nbsp;=&nbsp;<var>a</var><sub>0</sub>,&nbsp;...,&nbsp;<var>a</var><sub><var>n</var>-1</sub>
 be a bitonic 0-1-sequence. Written in two rows, the sequence looks like
 shown in the following figure. The sequence starts with 0's, continues 
with 1's, and ends with 0's (Figure 3a). Or it starts with 1's, 
continues with 0's, and ends with 1's (Figure 3b). The regions of 1's 
may overlap or not. 
</p>

<div class="ind">
   <table border="0">
   <tbody><tr><td height="10"></td></tr>
   <tr><td align="center">
      <table border="0"><tbody><tr>
      <td align="center" valign="bottom"><img src="bitonicen_files/bito01.gif" alt="Bitonic 0-1-sequences (arranged in two rows)" hspace="30"></td>
      <td align="center" valign="bottom"><img src="bitonicen_files/bito10.gif" alt="Bitonic 0-1-sequences (arranged in two rows)" hspace="40"></td></tr>
      <tr><td height="10"></td></tr>
      <tr>
      <td align="center" valign="bottom">(a)</td>
      <td align="center" valign="bottom">(b)</td>
      </tr></tbody></table>
   </td></tr>
   <tr><td align="center">
   </td></tr>

   <tr><td height="10"></td></tr>

   <tr><td class="bez">Figure 3:&nbsp; Bitonic 0-1-sequences (arranged in two rows)</td></tr>
<tr><td height="10"></td></tr>
   </tbody></table>
</div>

<p>Several other variations are possible (see Figure 4 below). Application of comparator network <var>B</var><sub><var>n</var></sub> corresponds to a comparison between upper and lower row. In each case, the result stated in the theorem is achieved: all <var>b</var><sub><var>i</var></sub> are less than or equal to all <var>c</var><sub><var>j</var></sub> and <var>b</var> is bitonic and <var>c</var> is bitonic (Figure 4): </p>


   <table border="0">
   <tbody><tr><td height="10"></td></tr>
   <tr><td align="center">
      <table border="0"><tbody><tr>
      <td align="center" valign="bottom"><img src="bitonicen_files/bitocomp.gif" alt="Application of comparator network Bn to bitonic 0-1-sequences" hspace="30"></td>
      </tr></tbody></table>
   </td></tr>
   <tr><td align="center">
   </td></tr>

   <tr><td height="10"></td></tr>

   <tr><td class="bez">Figure 4:&nbsp; Application of comparator network B<sub>n</sub> to bitonic 0-1-sequences</td></tr>
<tr><td height="10"></td></tr>
   </tbody></table>
</div>

<p class="abst">&nbsp;</p>

<h3 class="header"><a name="section2">Bitonic sorting network</a></h3>

<p>The building blocks of the sorting network <var>BitonicSort</var> are comparator networks <var>B</var><sub><var>k</var></sub> with different <var>k</var>, where <var>k</var> is a power of 2. By using the divide-and-conquer strategy<a href="javascript:wind('../../../glossar/divconqe.htm',700,300,'no');"><img src="bitonicen_files/i.gif" alt="explanation" align="bottom" border="0"></a>, networks <var>BitonicMerge</var> and <var>BitonicSort</var> are formed. </p>

<p>First, a comparator network <var>BitonicMerge</var> is built that sorts a bitonic sequence. Due to the theorem, <var>B</var><sub><var>n</var></sub> produces two bitonic subsequences, where all elements of the first are smaller or equal than those of the second. Therefore, <var>BitonicMerge</var> can be built recursively as shown in Figure 5. </p>

<p>The bitonic sequence necessary as input for <var>BitonicMerge</var> 
is composed of two sorted subsequences, where the first is in ascending 
and the other in descending order. The subsequences themselves are 
sorted by recursive application of <var>BitonicSort</var> (Figure 6). </p>

<div class="ind">
   <table border="0">
   <tbody><tr><td height="10"></td></tr>
   <tr><td align="center">
      <table border="0"><tbody><tr>
      <td align="center" valign="bottom"><img src="bitonicen_files/bitonicmerge.gif" alt="BitonicMerge(n)"></td>
      </tr></tbody></table>
   </td></tr>
   <tr><td align="center">
   </td></tr>

   <tr><td height="10"></td></tr>

   <tr><td class="bez">Figure 5:&nbsp; BitonicMerge(n)</td></tr>
<tr><td height="10"></td></tr>
   </tbody></table>
</div>

<div class="ind">
   <table border="0">
   <tbody><tr><td height="10"></td></tr>
   <tr><td align="center">
      <table border="0"><tbody><tr>
      <td align="center" valign="bottom"><img src="bitonicen_files/bitonicsrt.gif" alt="BitonicSort(n)"></td>
      </tr></tbody></table>
   </td></tr>
   <tr><td align="center">
   </td></tr>

   <tr><td height="10"></td></tr>

   <tr><td class="bez">Figure 6:&nbsp; BitonicSort(n)</td></tr>
<tr><td height="10"></td></tr>
   </tbody></table>
</div>

<p>In the following Figure 7, as an example the sorting network <var>BitonicSort</var>(8) is given. The bitonic sequence <var>e</var> in the middle will be sorted by recursive application of <var>B</var><sub><var>k</var></sub>. The sequence <var>e</var> is bitonic, since it is composed of two halves <var>d</var> and <var>d'</var> which are sorted in opposite directions. These again are formed from bitonic sequences <var>a</var> and <var>a'</var> etc. </p>

<p>Given an arbitrary 0-1-sequence as input to the comparator network, the assertions stated in the figure will hold. </p>

<div class="ind">
   <table border="0">
   <tbody><tr><td height="10"></td></tr>
   <tr><td align="center">
      <table border="0"><tbody><tr>
      <td align="center" valign="bottom"><img src="bitonicen_files/binetzen.gif" alt="Sorting network BitonicSort for n = 8"></td>
      </tr></tbody></table>
   </td></tr>
   <tr><td align="center">
   </td></tr>

   <tr><td height="10"></td></tr>

   <tr><td class="bez">Figure 7:&nbsp; Sorting network BitonicSort for n = 8</td></tr>
<tr><td height="10"></td></tr>
   </tbody></table>
</div>

<p>At the output of the comparator network, the 0-1-sequence is sorted. 
Now the 0-1-principle can be applied to the comparator network as a 
whole: since the network sorts every arbitrary 0-1-sequence, it will 
also sort every sequence of arbitrary values, hence it is a sorting 
network. </p>

<p class="abst">&nbsp;</p>

<h3 class="header"><a name="section3">Analysis</a></h3>

<p>In order to form a sorted sequence of length <var>n</var> from two sorted sequences of length <var>n</var>/2, there are log(<var>n</var>) comparator stages required (e.g. the 3&nbsp;=&nbsp;log(8) comparator stages to form sequence <var>i</var> from <var>d</var> and <var>d'</var>). The number of comparator stages <var>T</var>(<var>n</var>) of the entire sorting network is given by: </p>

<p class="ind"><var>T</var>(<var>n</var>)&nbsp;&nbsp;=&nbsp;&nbsp;log(<var>n</var>)&nbsp;+&nbsp;<var>T</var>(<var>n</var>/2) </p>

<p>The solution of this recurrence equation is </p>

<p class="ind"><var>T</var>(<var>n</var>)&nbsp;&nbsp;=&nbsp;&nbsp;log(<var>n</var>)&nbsp;+&nbsp;log(<var>n</var>)-1&nbsp;+&nbsp;log(<var>n</var>)-2&nbsp;+&nbsp;...&nbsp;+&nbsp;1&nbsp;&nbsp;=&nbsp;&nbsp;log(<var>n</var>)&nbsp;·&nbsp;(log(<var>n</var>)+1)&nbsp;/&nbsp;2 </p>

<p>Each stage of the sorting network consists of <var>n</var>/2 comparators. On the whole, these are &#920;(<var>n</var>·log(<var>n</var>)<sup>2</sup>) comparators. </p>

<p class="abst">&nbsp;</p>

<h3 class="header"><a name="section4">Program</a></h3>

<p>In the following, an implementation of bitonic sort in Java is given. The program is encapsulated in a class <i>BitonicSorter</i>.<a href="#footnote" style="text-decoration: none;" title="see footnote" name="rft2"><sup>2</sup>)</a> With the statements <table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code">
<pre class="java">Sorter s=<span class="codekeyword">new</span> BitonicSorter();
s.sort(b);
</pre></td></tr></tbody></table> </p>

<p>an array <var>b</var> of length <var>n</var> is sorted with bitonic sort. The length <var>n</var> must be a power of 2 (cf. <a href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/bitonic/oddn.htm" target="_top">bitonic sort for arbitrary <var>n</var></a>). </p>

<p>Function <i>bitonicSort</i> first produces a bitonic sequence by recursively sorting its two halves in opposite directions, and then calls <i>bitonicMerge</i>. </p>

<p>Function <i>bitonicMerge</i> recursively sorts a bitonic sequence in ascending order, if <i>dir</i> = <i>ASCENDING</i>, and in descending order otherwise. The sequence to be sorted starts at index position <i>lo</i>, the number of elements is <var>n</var>. </p>

<p>A comparator is modelled by the function <i>compare</i>, where the parameter <i>dir</i> indicates the sorting direction. If <i>dir</i> is <i>ASCENDING</i> and <var>a</var>[<var>i</var>]&nbsp;&gt;&nbsp;<var>a</var>[<var>j</var>] is true or <i>dir</i> is <i>DESCENDING</i> and <var>a</var>[<var>i</var>]&nbsp;&gt;&nbsp;<var>a</var>[<var>j</var>] is false then <var>a</var>[<var>i</var>] and <var>a</var>[<var>j</var>] are exchanged. </p>

<p class="abst">&nbsp;</p>
<table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="code">
<pre class="java"><span class="codekeyword">public</span> <span class="codekeyword">class</span> BitonicSorter <span class="codekeyword">implements</span> Sorter
{
    <span class="codekeyword">private</span> <span class="codekeyword">int</span>[] a;
    <span class="codecomment">// sorting direction:</span>
    <span class="codekeyword">private</span> <span class="codekeyword">final</span> <span class="codekeyword">static</span> <span class="codekeyword">boolean</span> ASCENDING=<span class="codekeyword">true</span>, DESCENDING=<span class="codekeyword">false</span>;

    <span class="codekeyword">public</span> <span class="codekeyword">void</span> sort(<span class="codekeyword">int</span>[] a)
    {
        <span class="codekeyword">this</span>.a=a;
        bitonicSort(0, a.length, ASCENDING);
    }

    <span class="codekeyword">private</span> <span class="codekeyword">void</span> bitonicSort(<span class="codekeyword">int</span> lo, <span class="codekeyword">int</span> n, <span class="codekeyword">boolean</span> dir)
    {
        <span class="codekeyword">if</span> (n&gt;1)
        {
            <span class="codekeyword">int</span> m=n/2;
            bitonicSort(lo, m, ASCENDING);
            bitonicSort(lo+m, m, DESCENDING);
            bitonicMerge(lo, n, dir);
        }
    }

    <span class="codekeyword">private</span> <span class="codekeyword">void</span> bitonicMerge(<span class="codekeyword">int</span> lo, <span class="codekeyword">int</span> n, <span class="codekeyword">boolean</span> dir)
    {
        <span class="codekeyword">if</span> (n&gt;1)
        {
            <span class="codekeyword">int</span> m=n/2;
            <span class="codekeyword">for</span> (<span class="codekeyword">int</span> i=lo; i&lt;lo+m; i++)
                compare(i, i+m, dir);
            bitonicMerge(lo, m, dir);
            bitonicMerge(lo+m, m, dir);
        }
    }

    <span class="codekeyword">private</span> <span class="codekeyword">void</span> compare(<span class="codekeyword">int</span> i, <span class="codekeyword">int</span> j, <span class="codekeyword">boolean</span> dir)
    {
        <span class="codekeyword">if</span> (dir==(a[i]&gt;a[j]))
            exchange(i, j);
    }

    <span class="codekeyword">private</span> <span class="codekeyword">void</span> exchange(<span class="codekeyword">int</span> i, <span class="codekeyword">int</span> j)
    {
        <span class="codekeyword">int</span> t=a[i];
        a[i]=a[j];
        a[j]=t;
    }

}    <span class="codecomment">// end class BitonicSorter</span>
</pre></td></tr></tbody></table> 
<p class="abst">&nbsp;</p>

<h3 class="header"><a name="section5">Simulation</a></h3>

<p class="abst">&nbsp;</p>
<p class="ind"><applet archive="bitonicen_files/showbiton.jar" code="Showbiton" alt="(Java applet for the simulation of bitonic sort)" height="330" width="380">
<param name="sprache" value="Englisch">
<span style="background-color: yellow;">(Java applet for the simulation of bitonic sort)</span>
</applet>
</p>

<p class="abst">&nbsp;</p>

<h3 class="header"><a name="section6">Conclusions</a></h3>

<p>We have presented the bitonic sorting network and proved its correctness. With &#920;(<var>n</var>·log(<var>n</var>)<sup>2</sup>) comparators this sorting algorithm is not optimal &#8211; the lower bound for sorting based on comparisons is in &#937;(<var>n</var>·log(<var>n</var>)). There are sorting algorithms like e.g. <a href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/heap/heapen.htm" target="_top">heapsort</a>
 that achieve this lower bound. Nevertheless bitonic sort is interesting
 for realization in hardware or parallel processor arrays, since its 
sequence of comparisons is fixed and not dependent on data. The 
algorithm can be adapted to arbitrary <var>n</var> being not necessarily a power of 2 (<a href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/bitonic/oddn.htm" target="_top">bitonic sort for arbitrary <var>n</var></a>). </p>

<p class="abst">&nbsp;</p>

<h3 class="header"><a name="section7">References</a></h3>

<table cellpadding="0" cellspacing="0" width="100%">
<tbody><tr><td class="litref"></td><td height="5"></td><td></td></tr>
<tr><td class="litref">[AKS&nbsp;83]</td><td class="lit" colspan="2"><span class="person">M. Ajtai, J. Komlos, E. Szemeredi</span>: An <var>O</var>(<var>n</var> log <var>n</var>) Sorting Network. Proceedings of the 25th ACM Symposium on Theory of Computing, 1-9 (1983)</td></tr>

<tr><td class="litref">[Bat&nbsp;68]</td><td class="lit" colspan="2"><span class="person">K.E. Batcher</span>: Sorting Networks and their Applications. Proc. AFIPS Spring Joint Comput. Conf., Vol. 32, 307-314 (1968)</td></tr>

<tr><td class="litref">[CLRS&nbsp;01]</td><td class="lit" colspan="2"><span class="person">T.H. Cormen, C.E. Leiserson, R.L. Rivest, C. Stein</span>: Introduction to Algorithms. 2nd edition, The MIT Press (2001)</td></tr>

<tr><td class="litref">[Knu&nbsp;73]</td><td class="lit" colspan="2"><span class="person">D.E. Knuth</span>: The Art of Computer Programming, Vol. 3 - Sorting and Searching. Addison-Wesley (1973)</td></tr>

</tbody></table>

<p class="abst">&nbsp;</p>


<a name="footnote"></a><hr>
<p class="footnote"><a href="#rft1" style="text-decoration: none;" title="back"><sup>1</sup>)</a> &nbsp;The term <i>bi</i>tonic is a technical term meaning that the sequence is twofold <i>mono</i>tonic.</p>

<p class="footnote"><a href="#rft2" style="text-decoration: none;" title="back"><sup>2</sup>)</a> &nbsp;It is assumed that the class <i>BitonicSorter</i> implements an interface <i>Sorter</i> with the method <i>sort</i>. Otherwise, "<span class="java"><span class="codekeyword">implements</span> Sorter</span>" may be omitted.</p>


<p class="abst">&nbsp;</p>
<table class="trailer" width="100%"><tbody><tr><td> <a href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/networks/indexen.htm" target="_top"><img src="bitonicen_files/up1.gif" alt="up" title="up" align="bottom" border="0"></a></td><td align="right" width="185">
<a href="http://del.icio.us/post/post?url=http://www.inf.fh-flensburg.de/lang/algorithmen/sortieren/bitonic/bitonicen.htm&amp;title=Bitonic%20sort" title="del.icio.us">
<img class="screen" src="bitonicen_files/delicious.png" alt="del.icio.us" border="0"></a> 
<a href="http://digg.com/submit?phase=2&amp;url=http://www.inf.fh-flensburg.de/lang/algorithmen/sortieren/bitonic/bitonicen.htm" title="digg.com">
<img class="screen" src="bitonicen_files/digg.gif" alt="digg.com" border="0"></a> 
<a href="http://www.google.com/bookmarks/mark?u=http://www.inf.fh-flensburg.de/lang/algorithmen/sortieren/bitonic/bitonicen.htm&amp;op=add&amp;bkmk=http://www.inf.fh-flensburg.de/lang/algorithmen/sortieren/bitonic/bitonicen.htm&amp;title=Bitonic%20sort" title="Google">
<img class="screen" src="bitonicen_files/google.png" alt="Google" border="0"></a> 
<a href="http://ma.gnolia.com/beta/bookmarklet/add?url=http://www.inf.fh-flensburg.de/lang/algorithmen/sortieren/bitonic/bitonicen.htm&amp;title=Bitonic%20sort" title="Ma.gnolia">
<img class="screen" src="bitonicen_files/magnolia.png" alt="Ma.gnolia" border="0"></a> 
<a href="http://www.mister-wong.de/index.php?action=addurl&amp;bm_url=http://www.inf.fh-flensburg.de/lang/algorithmen/sortieren/bitonic/bitonicen.htm&amp;bm_description=Bitonic%20sort" title="Mister Wong">
<img class="screen" src="bitonicen_files/wong.png" alt="Mister Wong" border="0"></a> 
<a href="http://www.stumbleupon.com/submit?url=http://www.inf.fh-flensburg.de/lang/algorithmen/sortieren/bitonic/bitonicen.htm&amp;title=Bitonic%20sort" title="StumbleUpon">
<img class="screen" src="bitonicen_files/su.png" alt="StumbleUpon" border="0"></a> 
<a href="http://myweb.yahoo.com/myresults/bookmarklet?u=http://www.inf.fh-flensburg.de/lang/algorithmen/sortieren/bitonic/bitonicen.htm&amp;t=Bitonic%20sort" title="YahooMyWeb">
<img class="screen" src="bitonicen_files/yahoomyweb.gif" alt="YahooMyWeb" border="0"></a> 
<a href="http://linkarena.com/bookmarks/addlink/?url=http://www.inf.fh-flensburg.de/lang/algorithmen/sortieren/bitonic/bitonicen.htm&amp;title=Bitonic%20sort" title="LinkARENA">
<img class="screen" src="bitonicen_files/linkarena.gif" alt="LinkARENA" border="0"></a> 
</td></tr></tbody></table>
<p class="abst">&nbsp;</p>

<table cellspacing="0" width="100%"><tbody><tr><td>
<address><a href="http://www.iti.fh-flensburg.de/lang/indexen.htm" target="_top" title="home" accesskey="0"><img class="screen" src="bitonicen_files/home.gif" alt="home" border="0" height="10" width="25">H.W. Lang</a> &nbsp; <a href="http://www.fh-flensburg.de/" target="_top" title="Fachhochschule Flensburg - University of Applied Sciences">FH Flensburg</a> &nbsp; <a href="mailto:lang@fh-flensburg.de" title="send comments">lang@fh-flensburg.de</a> &nbsp; <a href="http://www.iti.fh-flensburg.de/lang/impressum.htm" target="_top">Impressum</a> &nbsp; © &nbsp; Created: 05.03.1997 &nbsp; Updated: 18.05.2010</address></td>
<td align="right"><a href="http://validator.w3.org/check?uri=referer"><img class="screen" src="bitonicen_files/validhtml401.gif" alt="Valid HTML 4.01 Transitional" align="bottom" border="0" height="16" width="44"></a></td></tr></tbody></table>
</div>
</body></html>